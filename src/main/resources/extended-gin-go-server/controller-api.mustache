{{>partial_header}}
package {{apiPath}}

{{#operations}}
import (
	"net/http"

	"github.com/gin-gonic/gin"
){{#operation}}

// {{nickname}} - {{{summary}}}
func {{nickname}}(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}{{/operation}}{{/operations}}

{{#operations}}{{#operation}}

// {{nickname}} - {{{summary}}}
func {{nickname}}(c *gin.Context){
{{#hasFormParams}}
    err := r.ParseForm()
    if err != nil {
        w.WriteHeader(500)
        return
    }
    {{/hasFormParams}}
{{#hasPathParams}}
    params := mux.Vars(r)
{{/hasPathParams}}
{{#hasQueryParams}}
    query := c.Request.URL.Query()
{{/hasQueryParams}}
{{#allParams}}
    {{#isPathParam}}
        {{#isLong}}
    {{paramName}}, err := parseInt64Parameter(query.Get("{{paramName}}"))
    if err != nil {
        w.WriteHeader(500)
        return
    }
        {{/isLong}}
        {{#isInteger}}
    {{paramName}}, err := parseInt32Parameter(query.Get("{{paramName}}"))
    if err != nil {
        w.WriteHeader(500)
        return
    }
        {{/isInteger}}
        {{^isLong}}
            {{^isInteger}}
    {{paramName}} := c.Query({{paramName}})
            {{/isInteger}}
        {{/isLong}}
    {{/isPathParam}}
    {{#isQueryParam}}
        {{#isLong}}
    {{paramName}}, err := parseInt64Parameter(query.Get("{{paramName}}"))
    if err != nil {
        w.WriteHeader(500)
        return
    }
        {{/isLong}}
        {{#isInteger}}
    {{paramName}}, err := parseInt32Parameter(query.Get("{{paramName}}"))
    if err != nil {
        w.WriteHeader(500)
        return
    }
        {{/isInteger}}
        {{^isLong}}
            {{^isInteger}}
    {{paramName}} := {{#isArray}}strings.Split({{/isArray}}query.Get("{{paramName}}"){{#isArray}}, ","){{/isArray}}{{/isInteger}}{{/isLong}}{{/isQueryParam}}{{#isFormParam}}{{#isFile}}
    {{paramName}}, err := ReadFormFileToTempFile(r, "{{paramName}}")
    if err != nil {
        w.WriteHeader(500)
        return
    }
    {{/isFile}}{{#isLong}}
    {{paramName}}, err := parseInt64Parameter( r.FormValue("{{paramName}}"))
    if err != nil {
        w.WriteHeader(500)
        return
    }
    {{/isLong}}{{#isInteger}}
    {{paramName}}, err := parseInt32Parameter( r.FormValue("{{paramName}}"))
    if err != nil {
        w.WriteHeader(500)
        return
    }
    {{/isInteger}}{{^isFile}}{{^isLong}}
    {{paramName}} := r.FormValue("{{paramName}}"){{/isLong}}{{/isFile}}{{/isFormParam}}
{{#isHeaderParam}}
    {{paramName}} := r.Header.Get("{{paramName}}")
{{/isHeaderParam}}
{{#isBodyParam}}
    {{paramName}} := &{{dataType}}{}
    if err := json.NewDecoder(r.Body).Decode(&{{paramName}}); err != nil {
        w.WriteHeader(500)
        return
    }
    {{/isBodyParam}}
{{/allParams}}
    result, err := c.service.{{nickname}}(r.Context(){{#allParams}}, {{#isBodyParam}}*{{/isBodyParam}}{{paramName}}{{/allParams}})
    //If an error occured, encode the error with the status code
    if err != nil {
    EncodeJSONResponse(err.Error(), &result.Code, w)
    return
    }
    //If no error, encode the body and the result code
    EncodeJSONResponse(result.Body, &result.Code, w)

}{{/operation}}{{/operations}}
